ARM GAS  /tmp/ccMpuVUf.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/adc.c"
  18              		.section	.text.MX_ADC1_Init,"ax",%progbits
  19              		.align	1
  20              		.global	MX_ADC1_Init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	MX_ADC1_Init:
  26              	.LFB420:
   1:Core/Src/adc.c **** /* USER CODE BEGIN Header */
   2:Core/Src/adc.c **** /**
   3:Core/Src/adc.c ****   ******************************************************************************
   4:Core/Src/adc.c ****   * @file    adc.c
   5:Core/Src/adc.c ****   * @brief   This file provides code for the configuration
   6:Core/Src/adc.c ****   *          of the ADC instances.
   7:Core/Src/adc.c ****   ******************************************************************************
   8:Core/Src/adc.c ****   * @attention
   9:Core/Src/adc.c ****   *
  10:Core/Src/adc.c ****   * Copyright (c) 2023 STMicroelectronics.
  11:Core/Src/adc.c ****   * All rights reserved.
  12:Core/Src/adc.c ****   *
  13:Core/Src/adc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/adc.c ****   * in the root directory of this software component.
  15:Core/Src/adc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/adc.c ****   *
  17:Core/Src/adc.c ****   ******************************************************************************
  18:Core/Src/adc.c ****   */
  19:Core/Src/adc.c **** /* USER CODE END Header */
  20:Core/Src/adc.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/adc.c **** #include "adc.h"
  22:Core/Src/adc.c **** 
  23:Core/Src/adc.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/adc.c **** 
  25:Core/Src/adc.c **** /* USER CODE END 0 */
  26:Core/Src/adc.c **** 
  27:Core/Src/adc.c **** ADC_HandleTypeDef hadc1;
  28:Core/Src/adc.c **** DMA_HandleTypeDef hdma_adc1;
  29:Core/Src/adc.c **** 
  30:Core/Src/adc.c **** /* ADC1 init function */
  31:Core/Src/adc.c **** void MX_ADC1_Init(void)
  32:Core/Src/adc.c **** {
ARM GAS  /tmp/ccMpuVUf.s 			page 2


  27              		.loc 1 32 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  33:Core/Src/adc.c **** 
  34:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_Init 0 */
  35:Core/Src/adc.c **** 
  36:Core/Src/adc.c ****   /* USER CODE END ADC1_Init 0 */
  37:Core/Src/adc.c **** 
  38:Core/Src/adc.c ****   ADC_ChannelConfTypeDef sConfig = {0};
  31              		.loc 1 38 3 view .LVU1
  32:Core/Src/adc.c **** 
  32              		.loc 1 32 1 is_stmt 0 view .LVU2
  33 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 0, -24
  37              		.cfi_offset 1, -20
  38              		.cfi_offset 2, -16
  39              		.cfi_offset 3, -12
  40              		.cfi_offset 4, -8
  41              		.cfi_offset 14, -4
  42              		.loc 1 38 26 view .LVU3
  43 0002 0C22     		movs	r2, #12
  44 0004 0021     		movs	r1, #0
  45 0006 01A8     		add	r0, sp, #4
  46 0008 FFF7FEFF 		bl	memset
  47              	.LVL0:
  39:Core/Src/adc.c **** 
  40:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_Init 1 */
  41:Core/Src/adc.c **** 
  42:Core/Src/adc.c ****   /* USER CODE END ADC1_Init 1 */
  43:Core/Src/adc.c **** 
  44:Core/Src/adc.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
  45:Core/Src/adc.c ****   */
  46:Core/Src/adc.c ****   hadc1.Instance = ADC1;
  48              		.loc 1 46 3 is_stmt 1 view .LVU4
  47:Core/Src/adc.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  49              		.loc 1 47 3 view .LVU5
  48:Core/Src/adc.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  50              		.loc 1 48 3 view .LVU6
  49:Core/Src/adc.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  51              		.loc 1 49 3 view .LVU7
  50:Core/Src/adc.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  52              		.loc 1 50 3 view .LVU8
  51:Core/Src/adc.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  53              		.loc 1 51 3 view .LVU9
  52:Core/Src/adc.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
  54              		.loc 1 52 3 view .LVU10
  53:Core/Src/adc.c ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  55              		.loc 1 53 3 view .LVU11
  54:Core/Src/adc.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
  56              		.loc 1 54 3 view .LVU12
  46:Core/Src/adc.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  57              		.loc 1 46 18 is_stmt 0 view .LVU13
  58 000c 234C     		ldr	r4, .L14
  59 000e 244B     		ldr	r3, .L14+4
ARM GAS  /tmp/ccMpuVUf.s 			page 3


  50:Core/Src/adc.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  60              		.loc 1 50 27 view .LVU14
  61 0010 8022     		movs	r2, #128
  46:Core/Src/adc.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  62              		.loc 1 46 18 view .LVU15
  63 0012 2360     		str	r3, [r4]
  47:Core/Src/adc.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  64              		.loc 1 47 29 view .LVU16
  65 0014 8023     		movs	r3, #128
  50:Core/Src/adc.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  66              		.loc 1 50 27 view .LVU17
  67 0016 9203     		lsls	r2, r2, #14
  68 0018 2261     		str	r2, [r4, #16]
  51:Core/Src/adc.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
  69              		.loc 1 51 27 view .LVU18
  70 001a 0822     		movs	r2, #8
  47:Core/Src/adc.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  71              		.loc 1 47 29 view .LVU19
  72 001c 1B06     		lsls	r3, r3, #24
  73 001e 6360     		str	r3, [r4, #4]
  48:Core/Src/adc.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  74              		.loc 1 48 25 view .LVU20
  75 0020 0023     		movs	r3, #0
  51:Core/Src/adc.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
  76              		.loc 1 51 27 view .LVU21
  77 0022 6261     		str	r2, [r4, #20]
  55:Core/Src/adc.c ****   hadc1.Init.NbrOfConversion = 2;
  78              		.loc 1 55 30 view .LVU22
  79 0024 063A     		subs	r2, r2, #6
  80 0026 E261     		str	r2, [r4, #28]
  56:Core/Src/adc.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
  81              		.loc 1 56 36 view .LVU23
  82 0028 621C     		adds	r2, r4, #1
  83 002a D377     		strb	r3, [r2, #31]
  57:Core/Src/adc.c ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  84              		.loc 1 57 31 view .LVU24
  85 002c 9822     		movs	r2, #152
  86 002e D200     		lsls	r2, r2, #3
  87 0030 6262     		str	r2, [r4, #36]
  58:Core/Src/adc.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  88              		.loc 1 58 35 view .LVU25
  89 0032 C03A     		subs	r2, r2, #192
  90 0034 A262     		str	r2, [r4, #40]
  59:Core/Src/adc.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
  91              		.loc 1 59 36 view .LVU26
  92 0036 2200     		movs	r2, r4
  93 0038 2C32     		adds	r2, r2, #44
  94 003a 1370     		strb	r3, [r2]
  60:Core/Src/adc.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  61:Core/Src/adc.c ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
  95              		.loc 1 61 34 view .LVU27
  96 003c 0322     		movs	r2, #3
  97 003e 6263     		str	r2, [r4, #52]
  62:Core/Src/adc.c ****   hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
  98              		.loc 1 62 34 view .LVU28
  99 0040 A263     		str	r2, [r4, #56]
  63:Core/Src/adc.c ****   hadc1.Init.OversamplingMode = DISABLE;
ARM GAS  /tmp/ccMpuVUf.s 			page 4


 100              		.loc 1 63 31 view .LVU29
 101 0042 2200     		movs	r2, r4
  64:Core/Src/adc.c ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  65:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 102              		.loc 1 65 7 view .LVU30
 103 0044 2000     		movs	r0, r4
  63:Core/Src/adc.c ****   hadc1.Init.OversamplingMode = DISABLE;
 104              		.loc 1 63 31 view .LVU31
 105 0046 3C32     		adds	r2, r2, #60
  48:Core/Src/adc.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 106              		.loc 1 48 25 view .LVU32
 107 0048 A360     		str	r3, [r4, #8]
  49:Core/Src/adc.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 108              		.loc 1 49 24 view .LVU33
 109 004a E360     		str	r3, [r4, #12]
  52:Core/Src/adc.c ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 110              		.loc 1 52 31 view .LVU34
 111 004c 2383     		strh	r3, [r4, #24]
  54:Core/Src/adc.c ****   hadc1.Init.NbrOfConversion = 2;
 112              		.loc 1 54 33 view .LVU35
 113 004e A376     		strb	r3, [r4, #26]
  55:Core/Src/adc.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 114              		.loc 1 55 3 is_stmt 1 view .LVU36
  56:Core/Src/adc.c ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 115              		.loc 1 56 3 view .LVU37
  57:Core/Src/adc.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 116              		.loc 1 57 3 view .LVU38
  58:Core/Src/adc.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 117              		.loc 1 58 3 view .LVU39
  59:Core/Src/adc.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 118              		.loc 1 59 3 view .LVU40
  60:Core/Src/adc.c ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 119              		.loc 1 60 3 view .LVU41
  60:Core/Src/adc.c ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 120              		.loc 1 60 22 is_stmt 0 view .LVU42
 121 0050 2363     		str	r3, [r4, #48]
  61:Core/Src/adc.c ****   hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 122              		.loc 1 61 3 is_stmt 1 view .LVU43
  62:Core/Src/adc.c ****   hadc1.Init.OversamplingMode = DISABLE;
 123              		.loc 1 62 3 view .LVU44
  63:Core/Src/adc.c ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 124              		.loc 1 63 3 view .LVU45
  63:Core/Src/adc.c ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 125              		.loc 1 63 31 is_stmt 0 view .LVU46
 126 0052 1370     		strb	r3, [r2]
  64:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 127              		.loc 1 64 3 is_stmt 1 view .LVU47
  64:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 128              		.loc 1 64 35 is_stmt 0 view .LVU48
 129 0054 E364     		str	r3, [r4, #76]
 130              		.loc 1 65 3 is_stmt 1 view .LVU49
 131              		.loc 1 65 7 is_stmt 0 view .LVU50
 132 0056 FFF7FEFF 		bl	HAL_ADC_Init
 133              	.LVL1:
 134              		.loc 1 65 6 discriminator 1 view .LVU51
 135 005a 0028     		cmp	r0, #0
 136 005c 01D0     		beq	.L2
ARM GAS  /tmp/ccMpuVUf.s 			page 5


  66:Core/Src/adc.c ****   {
  67:Core/Src/adc.c ****     Error_Handler();
 137              		.loc 1 67 5 is_stmt 1 view .LVU52
 138 005e FFF7FEFF 		bl	Error_Handler
 139              	.LVL2:
 140              	.L2:
  68:Core/Src/adc.c ****   }
  69:Core/Src/adc.c **** 
  70:Core/Src/adc.c ****   /** Configure Regular Channel
  71:Core/Src/adc.c ****   */
  72:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_0;
 141              		.loc 1 72 3 view .LVU53
 142              		.loc 1 72 19 is_stmt 0 view .LVU54
 143 0062 0123     		movs	r3, #1
 144 0064 0193     		str	r3, [sp, #4]
  73:Core/Src/adc.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 145              		.loc 1 73 3 is_stmt 1 view .LVU55
 146              		.loc 1 73 16 is_stmt 0 view .LVU56
 147 0066 0023     		movs	r3, #0
  74:Core/Src/adc.c ****   sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  75:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 148              		.loc 1 75 7 view .LVU57
 149 0068 2000     		movs	r0, r4
 150 006a 01A9     		add	r1, sp, #4
  73:Core/Src/adc.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 151              		.loc 1 73 16 view .LVU58
 152 006c 0293     		str	r3, [sp, #8]
  74:Core/Src/adc.c ****   sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 153              		.loc 1 74 3 is_stmt 1 view .LVU59
  74:Core/Src/adc.c ****   sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 154              		.loc 1 74 24 is_stmt 0 view .LVU60
 155 006e 0393     		str	r3, [sp, #12]
 156              		.loc 1 75 3 is_stmt 1 view .LVU61
 157              		.loc 1 75 7 is_stmt 0 view .LVU62
 158 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 159              	.LVL3:
 160              		.loc 1 75 6 discriminator 1 view .LVU63
 161 0074 0028     		cmp	r0, #0
 162 0076 01D0     		beq	.L3
  76:Core/Src/adc.c ****   {
  77:Core/Src/adc.c ****     Error_Handler();
 163              		.loc 1 77 5 is_stmt 1 view .LVU64
 164 0078 FFF7FEFF 		bl	Error_Handler
 165              	.LVL4:
 166              	.L3:
  78:Core/Src/adc.c ****   }
  79:Core/Src/adc.c **** 
  80:Core/Src/adc.c ****   /** Configure Regular Channel
  81:Core/Src/adc.c ****   */
  82:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_1;
 167              		.loc 1 82 3 view .LVU65
 168              		.loc 1 82 19 is_stmt 0 view .LVU66
 169 007c 094B     		ldr	r3, .L14+8
  83:Core/Src/adc.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
  84:Core/Src/adc.c ****   sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
  85:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 170              		.loc 1 85 7 view .LVU67
ARM GAS  /tmp/ccMpuVUf.s 			page 6


 171 007e 2000     		movs	r0, r4
  82:Core/Src/adc.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 172              		.loc 1 82 19 view .LVU68
 173 0080 0193     		str	r3, [sp, #4]
  83:Core/Src/adc.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 174              		.loc 1 83 3 is_stmt 1 view .LVU69
  83:Core/Src/adc.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 175              		.loc 1 83 16 is_stmt 0 view .LVU70
 176 0082 0423     		movs	r3, #4
 177 0084 0293     		str	r3, [sp, #8]
  84:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 178              		.loc 1 84 3 is_stmt 1 view .LVU71
  84:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 179              		.loc 1 84 24 is_stmt 0 view .LVU72
 180 0086 084B     		ldr	r3, .L14+12
 181              		.loc 1 85 7 view .LVU73
 182 0088 01A9     		add	r1, sp, #4
  84:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 183              		.loc 1 84 24 view .LVU74
 184 008a 0393     		str	r3, [sp, #12]
 185              		.loc 1 85 3 is_stmt 1 view .LVU75
 186              		.loc 1 85 7 is_stmt 0 view .LVU76
 187 008c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 188              	.LVL5:
 189              		.loc 1 85 6 discriminator 1 view .LVU77
 190 0090 0028     		cmp	r0, #0
 191 0092 01D0     		beq	.L1
  86:Core/Src/adc.c ****   {
  87:Core/Src/adc.c ****     Error_Handler();
 192              		.loc 1 87 5 is_stmt 1 view .LVU78
 193 0094 FFF7FEFF 		bl	Error_Handler
 194              	.LVL6:
 195              	.L1:
  88:Core/Src/adc.c ****   }
  89:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_Init 2 */
  90:Core/Src/adc.c **** 
  91:Core/Src/adc.c ****   /* USER CODE END ADC1_Init 2 */
  92:Core/Src/adc.c **** 
  93:Core/Src/adc.c **** }
 196              		.loc 1 93 1 is_stmt 0 view .LVU79
 197              		@ sp needed
 198 0098 1FBD     		pop	{r0, r1, r2, r3, r4, pc}
 199              	.L15:
 200 009a C046     		.align	2
 201              	.L14:
 202 009c 00000000 		.word	hadc1
 203 00a0 00240140 		.word	1073816576
 204 00a4 02000004 		.word	67108866
 205 00a8 04FFFF07 		.word	134217476
 206              		.cfi_endproc
 207              	.LFE420:
 209              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 210              		.align	1
 211              		.global	HAL_ADC_MspInit
 212              		.syntax unified
 213              		.code	16
 214              		.thumb_func
ARM GAS  /tmp/ccMpuVUf.s 			page 7


 216              	HAL_ADC_MspInit:
 217              	.LVL7:
 218              	.LFB421:
  94:Core/Src/adc.c **** 
  95:Core/Src/adc.c **** void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
  96:Core/Src/adc.c **** {
 219              		.loc 1 96 1 is_stmt 1 view -0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 32
 222              		@ frame_needed = 0, uses_anonymous_args = 0
  97:Core/Src/adc.c **** 
  98:Core/Src/adc.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 223              		.loc 1 98 3 view .LVU81
  96:Core/Src/adc.c **** 
 224              		.loc 1 96 1 is_stmt 0 view .LVU82
 225 0000 30B5     		push	{r4, r5, lr}
 226              	.LCFI1:
 227              		.cfi_def_cfa_offset 12
 228              		.cfi_offset 4, -12
 229              		.cfi_offset 5, -8
 230              		.cfi_offset 14, -4
 231 0002 0500     		movs	r5, r0
 232 0004 89B0     		sub	sp, sp, #36
 233              	.LCFI2:
 234              		.cfi_def_cfa_offset 48
 235              		.loc 1 98 20 view .LVU83
 236 0006 1422     		movs	r2, #20
 237 0008 0021     		movs	r1, #0
 238 000a 03A8     		add	r0, sp, #12
 239              	.LVL8:
 240              		.loc 1 98 20 view .LVU84
 241 000c FFF7FEFF 		bl	memset
 242              	.LVL9:
  99:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 243              		.loc 1 99 3 is_stmt 1 view .LVU85
 244              		.loc 1 99 5 is_stmt 0 view .LVU86
 245 0010 1E4B     		ldr	r3, .L22
 246 0012 2A68     		ldr	r2, [r5]
 247 0014 9A42     		cmp	r2, r3
 248 0016 36D1     		bne	.L16
 100:Core/Src/adc.c ****   {
 101:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 0 */
 102:Core/Src/adc.c **** 
 103:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 0 */
 104:Core/Src/adc.c ****     /* ADC1 clock enable */
 105:Core/Src/adc.c ****     __HAL_RCC_ADC_CLK_ENABLE();
 249              		.loc 1 105 5 is_stmt 1 view .LVU87
 250              	.LBB2:
 251              		.loc 1 105 5 view .LVU88
 252              		.loc 1 105 5 view .LVU89
 253 0018 8021     		movs	r1, #128
 254 001a 1D4B     		ldr	r3, .L22+4
 255 001c 4903     		lsls	r1, r1, #13
 256 001e 1A6C     		ldr	r2, [r3, #64]
 257              	.LBE2:
 106:Core/Src/adc.c **** 
 107:Core/Src/adc.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
ARM GAS  /tmp/ccMpuVUf.s 			page 8


 108:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 109:Core/Src/adc.c ****     PA0     ------> ADC1_IN0
 110:Core/Src/adc.c ****     PA1     ------> ADC1_IN1
 111:Core/Src/adc.c ****     */
 112:Core/Src/adc.c ****     GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 113:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 114:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 115:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 258              		.loc 1 115 5 is_stmt 0 view .LVU90
 259 0020 A020     		movs	r0, #160
 260              	.LBB3:
 105:Core/Src/adc.c **** 
 261              		.loc 1 105 5 view .LVU91
 262 0022 0A43     		orrs	r2, r1
 263 0024 1A64     		str	r2, [r3, #64]
 105:Core/Src/adc.c **** 
 264              		.loc 1 105 5 is_stmt 1 view .LVU92
 265 0026 1A6C     		ldr	r2, [r3, #64]
 266              	.LBE3:
 267              		.loc 1 115 5 is_stmt 0 view .LVU93
 268 0028 C005     		lsls	r0, r0, #23
 269              	.LBB4:
 105:Core/Src/adc.c **** 
 270              		.loc 1 105 5 view .LVU94
 271 002a 0A40     		ands	r2, r1
 272              	.LBE4:
 273              	.LBB5:
 107:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 274              		.loc 1 107 5 view .LVU95
 275 002c 0121     		movs	r1, #1
 276              	.LBE5:
 277              	.LBB6:
 105:Core/Src/adc.c **** 
 278              		.loc 1 105 5 view .LVU96
 279 002e 0192     		str	r2, [sp, #4]
 105:Core/Src/adc.c **** 
 280              		.loc 1 105 5 is_stmt 1 view .LVU97
 281 0030 019A     		ldr	r2, [sp, #4]
 282              	.LBE6:
 105:Core/Src/adc.c **** 
 283              		.loc 1 105 5 view .LVU98
 107:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 284              		.loc 1 107 5 view .LVU99
 285              	.LBB7:
 107:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 286              		.loc 1 107 5 view .LVU100
 107:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 287              		.loc 1 107 5 view .LVU101
 288 0032 5A6B     		ldr	r2, [r3, #52]
 289 0034 0A43     		orrs	r2, r1
 290 0036 5A63     		str	r2, [r3, #52]
 107:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 291              		.loc 1 107 5 view .LVU102
 292 0038 5B6B     		ldr	r3, [r3, #52]
 293 003a 0B40     		ands	r3, r1
 294 003c 0293     		str	r3, [sp, #8]
 107:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
ARM GAS  /tmp/ccMpuVUf.s 			page 9


 295              		.loc 1 107 5 view .LVU103
 296 003e 029B     		ldr	r3, [sp, #8]
 297              	.LBE7:
 107:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 298              		.loc 1 107 5 view .LVU104
 112:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 299              		.loc 1 112 5 view .LVU105
 112:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 300              		.loc 1 112 25 is_stmt 0 view .LVU106
 301 0040 0323     		movs	r3, #3
 302              		.loc 1 115 5 view .LVU107
 303 0042 03A9     		add	r1, sp, #12
 112:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 304              		.loc 1 112 25 view .LVU108
 305 0044 0393     		str	r3, [sp, #12]
 113:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 306              		.loc 1 113 5 is_stmt 1 view .LVU109
 113:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 307              		.loc 1 113 26 is_stmt 0 view .LVU110
 308 0046 0493     		str	r3, [sp, #16]
 114:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 309              		.loc 1 114 5 is_stmt 1 view .LVU111
 310              		.loc 1 115 5 view .LVU112
 311 0048 FFF7FEFF 		bl	HAL_GPIO_Init
 312              	.LVL10:
 116:Core/Src/adc.c **** 
 117:Core/Src/adc.c ****     /* ADC1 DMA Init */
 118:Core/Src/adc.c ****     /* ADC1 Init */
 119:Core/Src/adc.c ****     hdma_adc1.Instance = DMA1_Channel1;
 313              		.loc 1 119 5 view .LVU113
 314              		.loc 1 119 24 is_stmt 0 view .LVU114
 315 004c 114C     		ldr	r4, .L22+8
 316 004e 124B     		ldr	r3, .L22+12
 120:Core/Src/adc.c ****     hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 121:Core/Src/adc.c ****     hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 122:Core/Src/adc.c ****     hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 123:Core/Src/adc.c ****     hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 124:Core/Src/adc.c ****     hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 125:Core/Src/adc.c ****     hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 126:Core/Src/adc.c ****     hdma_adc1.Init.Mode = DMA_CIRCULAR;
 127:Core/Src/adc.c ****     hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 128:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 317              		.loc 1 128 9 view .LVU115
 318 0050 2000     		movs	r0, r4
 119:Core/Src/adc.c ****     hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 319              		.loc 1 119 24 view .LVU116
 320 0052 2360     		str	r3, [r4]
 120:Core/Src/adc.c ****     hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 321              		.loc 1 120 5 is_stmt 1 view .LVU117
 120:Core/Src/adc.c ****     hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 322              		.loc 1 120 28 is_stmt 0 view .LVU118
 323 0054 0523     		movs	r3, #5
 324 0056 6360     		str	r3, [r4, #4]
 121:Core/Src/adc.c ****     hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 325              		.loc 1 121 5 is_stmt 1 view .LVU119
 121:Core/Src/adc.c ****     hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 326              		.loc 1 121 30 is_stmt 0 view .LVU120
ARM GAS  /tmp/ccMpuVUf.s 			page 10


 327 0058 0023     		movs	r3, #0
 328 005a A360     		str	r3, [r4, #8]
 122:Core/Src/adc.c ****     hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 329              		.loc 1 122 5 is_stmt 1 view .LVU121
 122:Core/Src/adc.c ****     hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 330              		.loc 1 122 30 is_stmt 0 view .LVU122
 331 005c E360     		str	r3, [r4, #12]
 123:Core/Src/adc.c ****     hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 332              		.loc 1 123 5 is_stmt 1 view .LVU123
 123:Core/Src/adc.c ****     hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 333              		.loc 1 123 27 is_stmt 0 view .LVU124
 334 005e 8033     		adds	r3, r3, #128
 335 0060 2361     		str	r3, [r4, #16]
 124:Core/Src/adc.c ****     hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 336              		.loc 1 124 5 is_stmt 1 view .LVU125
 124:Core/Src/adc.c ****     hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 337              		.loc 1 124 40 is_stmt 0 view .LVU126
 338 0062 8033     		adds	r3, r3, #128
 339 0064 6361     		str	r3, [r4, #20]
 125:Core/Src/adc.c ****     hdma_adc1.Init.Mode = DMA_CIRCULAR;
 340              		.loc 1 125 5 is_stmt 1 view .LVU127
 125:Core/Src/adc.c ****     hdma_adc1.Init.Mode = DMA_CIRCULAR;
 341              		.loc 1 125 37 is_stmt 0 view .LVU128
 342 0066 8023     		movs	r3, #128
 343 0068 DB00     		lsls	r3, r3, #3
 344 006a A361     		str	r3, [r4, #24]
 126:Core/Src/adc.c ****     hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 345              		.loc 1 126 5 is_stmt 1 view .LVU129
 126:Core/Src/adc.c ****     hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 346              		.loc 1 126 25 is_stmt 0 view .LVU130
 347 006c 2023     		movs	r3, #32
 348 006e E361     		str	r3, [r4, #28]
 127:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 349              		.loc 1 127 5 is_stmt 1 view .LVU131
 127:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 350              		.loc 1 127 29 is_stmt 0 view .LVU132
 351 0070 8023     		movs	r3, #128
 352 0072 9B01     		lsls	r3, r3, #6
 353 0074 2362     		str	r3, [r4, #32]
 354              		.loc 1 128 5 is_stmt 1 view .LVU133
 355              		.loc 1 128 9 is_stmt 0 view .LVU134
 356 0076 FFF7FEFF 		bl	HAL_DMA_Init
 357              	.LVL11:
 358              		.loc 1 128 8 discriminator 1 view .LVU135
 359 007a 0028     		cmp	r0, #0
 360 007c 01D0     		beq	.L18
 129:Core/Src/adc.c ****     {
 130:Core/Src/adc.c ****       Error_Handler();
 361              		.loc 1 130 7 is_stmt 1 view .LVU136
 362 007e FFF7FEFF 		bl	Error_Handler
 363              	.LVL12:
 364              	.L18:
 131:Core/Src/adc.c ****     }
 132:Core/Src/adc.c **** 
 133:Core/Src/adc.c ****     __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 365              		.loc 1 133 5 view .LVU137
 366              		.loc 1 133 5 view .LVU138
ARM GAS  /tmp/ccMpuVUf.s 			page 11


 367 0082 2C65     		str	r4, [r5, #80]
 368              		.loc 1 133 5 view .LVU139
 369 0084 A562     		str	r5, [r4, #40]
 370              		.loc 1 133 5 discriminator 1 view .LVU140
 371              	.L16:
 134:Core/Src/adc.c **** 
 135:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 1 */
 136:Core/Src/adc.c **** 
 137:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 1 */
 138:Core/Src/adc.c ****   }
 139:Core/Src/adc.c **** }
 372              		.loc 1 139 1 is_stmt 0 view .LVU141
 373 0086 09B0     		add	sp, sp, #36
 374              		@ sp needed
 375              	.LVL13:
 376              		.loc 1 139 1 view .LVU142
 377 0088 30BD     		pop	{r4, r5, pc}
 378              	.L23:
 379 008a C046     		.align	2
 380              	.L22:
 381 008c 00240140 		.word	1073816576
 382 0090 00100240 		.word	1073876992
 383 0094 00000000 		.word	hdma_adc1
 384 0098 08000240 		.word	1073872904
 385              		.cfi_endproc
 386              	.LFE421:
 388              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 389              		.align	1
 390              		.global	HAL_ADC_MspDeInit
 391              		.syntax unified
 392              		.code	16
 393              		.thumb_func
 395              	HAL_ADC_MspDeInit:
 396              	.LVL14:
 397              	.LFB422:
 140:Core/Src/adc.c **** 
 141:Core/Src/adc.c **** void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
 142:Core/Src/adc.c **** {
 398              		.loc 1 142 1 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 143:Core/Src/adc.c **** 
 144:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 402              		.loc 1 144 3 view .LVU144
 403              		.loc 1 144 5 is_stmt 0 view .LVU145
 404 0000 094B     		ldr	r3, .L26
 405 0002 0268     		ldr	r2, [r0]
 142:Core/Src/adc.c **** 
 406              		.loc 1 142 1 view .LVU146
 407 0004 10B5     		push	{r4, lr}
 408              	.LCFI3:
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 4, -8
 411              		.cfi_offset 14, -4
 142:Core/Src/adc.c **** 
 412              		.loc 1 142 1 view .LVU147
ARM GAS  /tmp/ccMpuVUf.s 			page 12


 413 0006 0400     		movs	r4, r0
 414              		.loc 1 144 5 view .LVU148
 415 0008 9A42     		cmp	r2, r3
 416 000a 0CD1     		bne	.L24
 145:Core/Src/adc.c ****   {
 146:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 0 */
 147:Core/Src/adc.c **** 
 148:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 0 */
 149:Core/Src/adc.c ****     /* Peripheral clock disable */
 150:Core/Src/adc.c ****     __HAL_RCC_ADC_CLK_DISABLE();
 417              		.loc 1 150 5 is_stmt 1 view .LVU149
 151:Core/Src/adc.c **** 
 152:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 153:Core/Src/adc.c ****     PA0     ------> ADC1_IN0
 154:Core/Src/adc.c ****     PA1     ------> ADC1_IN1
 155:Core/Src/adc.c ****     */
 156:Core/Src/adc.c ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 418              		.loc 1 156 5 is_stmt 0 view .LVU150
 419 000c A020     		movs	r0, #160
 420              	.LVL15:
 150:Core/Src/adc.c **** 
 421              		.loc 1 150 5 view .LVU151
 422 000e 074A     		ldr	r2, .L26+4
 423 0010 0749     		ldr	r1, .L26+8
 424 0012 136C     		ldr	r3, [r2, #64]
 425              		.loc 1 156 5 view .LVU152
 426 0014 C005     		lsls	r0, r0, #23
 150:Core/Src/adc.c **** 
 427              		.loc 1 150 5 view .LVU153
 428 0016 0B40     		ands	r3, r1
 429 0018 1364     		str	r3, [r2, #64]
 430              		.loc 1 156 5 is_stmt 1 view .LVU154
 431 001a 0321     		movs	r1, #3
 432 001c FFF7FEFF 		bl	HAL_GPIO_DeInit
 433              	.LVL16:
 157:Core/Src/adc.c **** 
 158:Core/Src/adc.c ****     /* ADC1 DMA DeInit */
 159:Core/Src/adc.c ****     HAL_DMA_DeInit(adcHandle->DMA_Handle);
 434              		.loc 1 159 5 view .LVU155
 435 0020 206D     		ldr	r0, [r4, #80]
 436 0022 FFF7FEFF 		bl	HAL_DMA_DeInit
 437              	.LVL17:
 438              	.L24:
 160:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
 161:Core/Src/adc.c **** 
 162:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 1 */
 163:Core/Src/adc.c ****   }
 164:Core/Src/adc.c **** }
 439              		.loc 1 164 1 is_stmt 0 view .LVU156
 440              		@ sp needed
 441              	.LVL18:
 442              		.loc 1 164 1 view .LVU157
 443 0026 10BD     		pop	{r4, pc}
 444              	.L27:
 445              		.align	2
 446              	.L26:
 447 0028 00240140 		.word	1073816576
ARM GAS  /tmp/ccMpuVUf.s 			page 13


 448 002c 00100240 		.word	1073876992
 449 0030 FFFFEFFF 		.word	-1048577
 450              		.cfi_endproc
 451              	.LFE422:
 453              		.global	hdma_adc1
 454              		.section	.bss.hdma_adc1,"aw",%nobits
 455              		.align	2
 458              	hdma_adc1:
 459 0000 00000000 		.space	92
 459      00000000 
 459      00000000 
 459      00000000 
 459      00000000 
 460              		.global	hadc1
 461              		.section	.bss.hadc1,"aw",%nobits
 462              		.align	2
 465              	hadc1:
 466 0000 00000000 		.space	100
 466      00000000 
 466      00000000 
 466      00000000 
 466      00000000 
 467              		.text
 468              	.Letext0:
 469              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 470              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 471              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g030xx.h"
 472              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g0xx.h"
 473              		.file 6 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 474              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_gpio.h"
 475              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 476              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_adc.h"
 477              		.file 10 "Core/Inc/adc.h"
 478              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
 479              		.file 12 "Core/Inc/main.h"
 480              		.file 13 "<built-in>"
ARM GAS  /tmp/ccMpuVUf.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/ccMpuVUf.s:19     .text.MX_ADC1_Init:00000000 $t
     /tmp/ccMpuVUf.s:25     .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccMpuVUf.s:202    .text.MX_ADC1_Init:0000009c $d
     /tmp/ccMpuVUf.s:465    .bss.hadc1:00000000 hadc1
     /tmp/ccMpuVUf.s:210    .text.HAL_ADC_MspInit:00000000 $t
     /tmp/ccMpuVUf.s:216    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
     /tmp/ccMpuVUf.s:381    .text.HAL_ADC_MspInit:0000008c $d
     /tmp/ccMpuVUf.s:458    .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/ccMpuVUf.s:389    .text.HAL_ADC_MspDeInit:00000000 $t
     /tmp/ccMpuVUf.s:395    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
     /tmp/ccMpuVUf.s:447    .text.HAL_ADC_MspDeInit:00000028 $d
     /tmp/ccMpuVUf.s:455    .bss.hdma_adc1:00000000 $d
     /tmp/ccMpuVUf.s:462    .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_ADC_Init
Error_Handler
HAL_ADC_ConfigChannel
HAL_GPIO_Init
HAL_DMA_Init
HAL_GPIO_DeInit
HAL_DMA_DeInit

ARM GAS  /tmp/ccNNnDmz.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32g0xx_it.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/stm32g0xx_it.cpp"
  18              		.section	.text.NMI_Handler,"ax",%progbits
  19              		.align	1
  20              		.global	NMI_Handler
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	NMI_Handler:
  26              		.fnstart
  27              	.LFB420:
   1:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32g0xx_it.cpp **** /**
   3:Core/Src/stm32g0xx_it.cpp ****   ******************************************************************************
   4:Core/Src/stm32g0xx_it.cpp ****   * @file    stm32g0xx_it.c
   5:Core/Src/stm32g0xx_it.cpp ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32g0xx_it.cpp ****   ******************************************************************************
   7:Core/Src/stm32g0xx_it.cpp ****   * @attention
   8:Core/Src/stm32g0xx_it.cpp ****   *
   9:Core/Src/stm32g0xx_it.cpp ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32g0xx_it.cpp ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32g0xx_it.cpp ****   *
  12:Core/Src/stm32g0xx_it.cpp ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32g0xx_it.cpp ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32g0xx_it.cpp ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32g0xx_it.cpp ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32g0xx_it.cpp ****   *
  17:Core/Src/stm32g0xx_it.cpp ****   ******************************************************************************
  18:Core/Src/stm32g0xx_it.cpp ****   */
  19:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END Header */
  20:Core/Src/stm32g0xx_it.cpp **** 
  21:Core/Src/stm32g0xx_it.cpp **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32g0xx_it.cpp **** #include "main.h"
  23:Core/Src/stm32g0xx_it.cpp **** #include "stm32g0xx_it.h"
  24:Core/Src/stm32g0xx_it.cpp **** #include "adc.h"
  25:Core/Src/stm32g0xx_it.cpp **** #include "tim.h"
  26:Core/Src/stm32g0xx_it.cpp **** #include "beat.h"
  27:Core/Src/stm32g0xx_it.cpp **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN Includes */
  29:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END Includes */
  30:Core/Src/stm32g0xx_it.cpp **** 
  31:Core/Src/stm32g0xx_it.cpp **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccNNnDmz.s 			page 2


  32:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN TD */
  33:Core/Src/stm32g0xx_it.cpp **** 
  34:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END TD */
  35:Core/Src/stm32g0xx_it.cpp **** 
  36:Core/Src/stm32g0xx_it.cpp **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN PD */
  38:Core/Src/stm32g0xx_it.cpp **** 
  39:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END PD */
  40:Core/Src/stm32g0xx_it.cpp **** 
  41:Core/Src/stm32g0xx_it.cpp **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN PM */
  43:Core/Src/stm32g0xx_it.cpp **** 
  44:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END PM */
  45:Core/Src/stm32g0xx_it.cpp **** 
  46:Core/Src/stm32g0xx_it.cpp **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN PV */
  48:Core/Src/stm32g0xx_it.cpp **** extern uint16_t dmabuf[];
  49:Core/Src/stm32g0xx_it.cpp **** extern Beat beat;
  50:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END PV */
  51:Core/Src/stm32g0xx_it.cpp **** 
  52:Core/Src/stm32g0xx_it.cpp **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN PFP */
  54:Core/Src/stm32g0xx_it.cpp **** 
  55:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END PFP */
  56:Core/Src/stm32g0xx_it.cpp **** 
  57:Core/Src/stm32g0xx_it.cpp **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN 0 */
  59:Core/Src/stm32g0xx_it.cpp **** 
  60:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END 0 */
  61:Core/Src/stm32g0xx_it.cpp **** 
  62:Core/Src/stm32g0xx_it.cpp **** /* External variables --------------------------------------------------------*/
  63:Core/Src/stm32g0xx_it.cpp **** extern DMA_HandleTypeDef hdma_adc1;
  64:Core/Src/stm32g0xx_it.cpp **** /* USER CODE BEGIN EV */
  65:Core/Src/stm32g0xx_it.cpp **** 
  66:Core/Src/stm32g0xx_it.cpp **** /* USER CODE END EV */
  67:Core/Src/stm32g0xx_it.cpp **** 
  68:Core/Src/stm32g0xx_it.cpp **** /******************************************************************************/
  69:Core/Src/stm32g0xx_it.cpp **** /*           Cortex-M0+ Processor Interruption and Exception Handlers          */
  70:Core/Src/stm32g0xx_it.cpp **** /******************************************************************************/
  71:Core/Src/stm32g0xx_it.cpp **** /**
  72:Core/Src/stm32g0xx_it.cpp ****   * @brief This function handles Non maskable interrupt.
  73:Core/Src/stm32g0xx_it.cpp ****   */
  74:Core/Src/stm32g0xx_it.cpp **** void NMI_Handler(void)
  75:Core/Src/stm32g0xx_it.cpp **** {
  28              		.loc 1 75 1 view -0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  76:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  77:Core/Src/stm32g0xx_it.cpp **** 
  78:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  79:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  80:Core/Src/stm32g0xx_it.cpp ****   while (1)
  35              		.loc 1 80 3 view .LVU1
ARM GAS  /tmp/ccNNnDmz.s 			page 3


  36              		.loc 1 80 3 view .LVU2
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE420:
  40              		.cantunwind
  41              		.fnend
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.code	16
  48              		.thumb_func
  50              	HardFault_Handler:
  51              		.fnstart
  52              	.LFB421:
  81:Core/Src/stm32g0xx_it.cpp ****   {
  82:Core/Src/stm32g0xx_it.cpp ****   }
  83:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  84:Core/Src/stm32g0xx_it.cpp **** }
  85:Core/Src/stm32g0xx_it.cpp **** 
  86:Core/Src/stm32g0xx_it.cpp **** /**
  87:Core/Src/stm32g0xx_it.cpp ****   * @brief This function handles Hard fault interrupt.
  88:Core/Src/stm32g0xx_it.cpp ****   */
  89:Core/Src/stm32g0xx_it.cpp **** void HardFault_Handler(void)
  90:Core/Src/stm32g0xx_it.cpp **** {
  53              		.loc 1 90 1 view -0
  54              		.cfi_startproc
  55              		@ Volatile: function does not return.
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.L4:
  91:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  92:Core/Src/stm32g0xx_it.cpp **** 
  93:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END HardFault_IRQn 0 */
  94:Core/Src/stm32g0xx_it.cpp ****   while (1)
  60              		.loc 1 94 3 view .LVU4
  61              		.loc 1 94 3 view .LVU5
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE421:
  65              		.cantunwind
  66              		.fnend
  68              		.section	.text.SVC_Handler,"ax",%progbits
  69              		.align	1
  70              		.global	SVC_Handler
  71              		.syntax unified
  72              		.code	16
  73              		.thumb_func
  75              	SVC_Handler:
  76              		.fnstart
  77              	.LFB422:
  95:Core/Src/stm32g0xx_it.cpp ****   {
  96:Core/Src/stm32g0xx_it.cpp ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  97:Core/Src/stm32g0xx_it.cpp ****     /* USER CODE END W1_HardFault_IRQn 0 */
  98:Core/Src/stm32g0xx_it.cpp ****   }
  99:Core/Src/stm32g0xx_it.cpp **** }
ARM GAS  /tmp/ccNNnDmz.s 			page 4


 100:Core/Src/stm32g0xx_it.cpp **** 
 101:Core/Src/stm32g0xx_it.cpp **** /**
 102:Core/Src/stm32g0xx_it.cpp ****   * @brief This function handles System service call via SWI instruction.
 103:Core/Src/stm32g0xx_it.cpp ****   */
 104:Core/Src/stm32g0xx_it.cpp **** void SVC_Handler(void)
 105:Core/Src/stm32g0xx_it.cpp **** {
  78              		.loc 1 105 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
 106:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN SVC_IRQn 0 */
 107:Core/Src/stm32g0xx_it.cpp **** 
 108:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END SVC_IRQn 0 */
 109:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN SVC_IRQn 1 */
 110:Core/Src/stm32g0xx_it.cpp **** 
 111:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END SVC_IRQn 1 */
 112:Core/Src/stm32g0xx_it.cpp **** }
  83              		.loc 1 112 1 is_stmt 0 view .LVU7
  84              		@ sp needed
  85 0000 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE422:
  88              		.cantunwind
  89              		.fnend
  91              		.section	.text.PendSV_Handler,"ax",%progbits
  92              		.align	1
  93              		.global	PendSV_Handler
  94              		.syntax unified
  95              		.code	16
  96              		.thumb_func
  98              	PendSV_Handler:
  99              		.fnstart
 100              	.LFB427:
 101              		.cfi_startproc
 113:Core/Src/stm32g0xx_it.cpp **** 
 114:Core/Src/stm32g0xx_it.cpp **** /**
 115:Core/Src/stm32g0xx_it.cpp ****   * @brief This function handles Pendable request for system service.
 116:Core/Src/stm32g0xx_it.cpp ****   */
 117:Core/Src/stm32g0xx_it.cpp **** void PendSV_Handler(void)
 102              		.loc 1 117 6 is_stmt 1 view -0
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              		@ sp needed
 107 0000 7047     		bx	lr
 108              		.cfi_endproc
 109              	.LFE427:
 110              		.cantunwind
 111              		.fnend
 113              		.section	.text.SysTick_Handler,"ax",%progbits
 114              		.align	1
 115              		.global	SysTick_Handler
 116              		.syntax unified
 117              		.code	16
 118              		.thumb_func
 120              	SysTick_Handler:
ARM GAS  /tmp/ccNNnDmz.s 			page 5


 121              		.fnstart
 122              	.LFB424:
 118:Core/Src/stm32g0xx_it.cpp **** {
 119:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 120:Core/Src/stm32g0xx_it.cpp **** 
 121:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END PendSV_IRQn 0 */
 122:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 123:Core/Src/stm32g0xx_it.cpp **** 
 124:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END PendSV_IRQn 1 */
 125:Core/Src/stm32g0xx_it.cpp **** }
 126:Core/Src/stm32g0xx_it.cpp **** 
 127:Core/Src/stm32g0xx_it.cpp **** /**
 128:Core/Src/stm32g0xx_it.cpp ****   * @brief This function handles System tick timer.
 129:Core/Src/stm32g0xx_it.cpp ****   */
 130:Core/Src/stm32g0xx_it.cpp **** void SysTick_Handler(void)
 131:Core/Src/stm32g0xx_it.cpp **** {
 123              		.loc 1 131 1 view -0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 132:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 133:Core/Src/stm32g0xx_it.cpp **** 
 134:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END SysTick_IRQn 0 */
 135:Core/Src/stm32g0xx_it.cpp ****   HAL_IncTick();
 127              		.loc 1 135 3 view .LVU10
 131:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 128              		.loc 1 131 1 is_stmt 0 view .LVU11
 129 0000 10B5     		push	{r4, lr}
 130              		.save {r4, lr}
 131              	.LCFI0:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 4, -8
 134              		.cfi_offset 14, -4
 135              		.loc 1 135 14 view .LVU12
 136 0002 FFF7FEFF 		bl	HAL_IncTick
 137              	.LVL0:
 136:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 137:Core/Src/stm32g0xx_it.cpp **** 
 138:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END SysTick_IRQn 1 */
 139:Core/Src/stm32g0xx_it.cpp **** }
 138              		.loc 1 139 1 view .LVU13
 139              		@ sp needed
 140 0006 10BD     		pop	{r4, pc}
 141              		.cfi_endproc
 142              	.LFE424:
 143              		.fnend
 145              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 146              		.align	1
 147              		.global	DMA1_Channel1_IRQHandler
 148              		.syntax unified
 149              		.code	16
 150              		.thumb_func
 152              	DMA1_Channel1_IRQHandler:
 153              		.fnstart
 154              	.LFB425:
 140:Core/Src/stm32g0xx_it.cpp **** 
 141:Core/Src/stm32g0xx_it.cpp **** /******************************************************************************/
ARM GAS  /tmp/ccNNnDmz.s 			page 6


 142:Core/Src/stm32g0xx_it.cpp **** /* STM32G0xx Peripheral Interrupt Handlers                                    */
 143:Core/Src/stm32g0xx_it.cpp **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 144:Core/Src/stm32g0xx_it.cpp **** /* For the available peripheral interrupt handler names,                      */
 145:Core/Src/stm32g0xx_it.cpp **** /* please refer to the startup file (startup_stm32g0xx.s).                    */
 146:Core/Src/stm32g0xx_it.cpp **** /******************************************************************************/
 147:Core/Src/stm32g0xx_it.cpp **** 
 148:Core/Src/stm32g0xx_it.cpp **** /**
 149:Core/Src/stm32g0xx_it.cpp ****   * @brief This function handles DMA1 channel 1 interrupt.
 150:Core/Src/stm32g0xx_it.cpp ****   */
 151:Core/Src/stm32g0xx_it.cpp **** void DMA1_Channel1_IRQHandler(void)
 152:Core/Src/stm32g0xx_it.cpp **** {
 155              		.loc 1 152 1 is_stmt 1 view -0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 153:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
 154:Core/Src/stm32g0xx_it.cpp **** 	HAL_ADC_Stop_DMA(&hadc1);
 159              		.loc 1 154 2 view .LVU15
 152:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
 160              		.loc 1 152 1 is_stmt 0 view .LVU16
 161 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 162              		.save {r3, r4, r5, r6, r7, lr}
 163              	.LCFI1:
 164              		.cfi_def_cfa_offset 24
 165              		.cfi_offset 3, -24
 166              		.cfi_offset 4, -20
 167              		.cfi_offset 5, -16
 168              		.cfi_offset 6, -12
 169              		.cfi_offset 7, -8
 170              		.cfi_offset 14, -4
 171              		.loc 1 154 18 view .LVU17
 172 0002 154D     		ldr	r5, .L15
 173              	.LBB2:
 155:Core/Src/stm32g0xx_it.cpp **** 	HAL_TIM_Base_Stop(&htim3);
 156:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END DMA1_Channel1_IRQn 0 */
 157:Core/Src/stm32g0xx_it.cpp ****   HAL_DMA_IRQHandler(&hdma_adc1);
 158:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 159:Core/Src/stm32g0xx_it.cpp **** 	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) dmabuf, 256);
 160:Core/Src/stm32g0xx_it.cpp **** 	HAL_TIM_Base_Start(&htim3);
 161:Core/Src/stm32g0xx_it.cpp **** 
 162:Core/Src/stm32g0xx_it.cpp **** 	for (int i = 0; i < 256; ++i) {
 174              		.loc 1 162 20 discriminator 1 view .LVU18
 175 0004 8027     		movs	r7, #128
 176              	.LBE2:
 154:Core/Src/stm32g0xx_it.cpp **** 	HAL_TIM_Base_Stop(&htim3);
 177              		.loc 1 154 18 view .LVU19
 178 0006 2800     		movs	r0, r5
 179 0008 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 180              	.LVL1:
 155:Core/Src/stm32g0xx_it.cpp **** 	HAL_TIM_Base_Stop(&htim3);
 181              		.loc 1 155 2 is_stmt 1 view .LVU20
 155:Core/Src/stm32g0xx_it.cpp **** 	HAL_TIM_Base_Stop(&htim3);
 182              		.loc 1 155 19 is_stmt 0 view .LVU21
 183 000c 134C     		ldr	r4, .L15+4
 184              	.LBB6:
 185              		.loc 1 162 20 discriminator 1 view .LVU22
 186 000e 7F00     		lsls	r7, r7, #1
ARM GAS  /tmp/ccNNnDmz.s 			page 7


 187              	.LBE6:
 155:Core/Src/stm32g0xx_it.cpp **** 	HAL_TIM_Base_Stop(&htim3);
 188              		.loc 1 155 19 view .LVU23
 189 0010 2000     		movs	r0, r4
 190 0012 FFF7FEFF 		bl	HAL_TIM_Base_Stop
 191              	.LVL2:
 157:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 192              		.loc 1 157 3 is_stmt 1 view .LVU24
 157:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 193              		.loc 1 157 21 is_stmt 0 view .LVU25
 194 0016 1248     		ldr	r0, .L15+8
 195 0018 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 196              	.LVL3:
 159:Core/Src/stm32g0xx_it.cpp **** 	HAL_TIM_Base_Start(&htim3);
 197              		.loc 1 159 2 is_stmt 1 view .LVU26
 159:Core/Src/stm32g0xx_it.cpp **** 	HAL_TIM_Base_Start(&htim3);
 198              		.loc 1 159 19 is_stmt 0 view .LVU27
 199 001c 8022     		movs	r2, #128
 200 001e 114E     		ldr	r6, .L15+12
 201 0020 5200     		lsls	r2, r2, #1
 202 0022 3100     		movs	r1, r6
 203 0024 2800     		movs	r0, r5
 204 0026 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 205              	.LVL4:
 160:Core/Src/stm32g0xx_it.cpp **** 
 206              		.loc 1 160 2 is_stmt 1 view .LVU28
 160:Core/Src/stm32g0xx_it.cpp **** 
 207              		.loc 1 160 20 is_stmt 0 view .LVU29
 208 002a 2000     		movs	r0, r4
 209 002c FFF7FEFF 		bl	HAL_TIM_Base_Start
 210              	.LVL5:
 211              		.loc 1 162 2 is_stmt 1 view .LVU30
 212              	.LBB7:
 213              		.loc 1 162 20 discriminator 1 view .LVU31
 214              		.loc 1 162 11 is_stmt 0 view .LVU32
 215 0030 0024     		movs	r4, #0
 216              	.LVL6:
 217              	.L10:
 218              	.LBB3:
 163:Core/Src/stm32g0xx_it.cpp **** 		beat.update(dmabuf[i]);
 219              		.loc 1 163 3 is_stmt 1 view .LVU33
 220              		.loc 1 163 14 is_stmt 0 view .LVU34
 221 0032 0D4D     		ldr	r5, .L15+16
 222 0034 6300     		lsls	r3, r4, #1
 223 0036 2800     		movs	r0, r5
 224 0038 F15A     		ldrh	r1, [r6, r3]
 225 003a FFF7FEFF 		bl	_ZN4Beat6updateEt
 226              	.LVL7:
 164:Core/Src/stm32g0xx_it.cpp **** 		if (beat.isValid()) {
 227              		.loc 1 164 3 is_stmt 1 view .LVU35
 228              	.LBB4:
 229              		.loc 1 164 19 is_stmt 0 view .LVU36
 230 003e 2800     		movs	r0, r5
 231 0040 FFF7FEFF 		bl	_ZNK4Beat7isValidEv
 232              	.LVL8:
 233              		.loc 1 164 3 discriminator 1 view .LVU37
 234 0044 0028     		cmp	r0, #0
ARM GAS  /tmp/ccNNnDmz.s 			page 8


 235 0046 02D0     		beq	.L9
 236              	.LBB5:
 165:Core/Src/stm32g0xx_it.cpp **** 			uint8_t rate = beat.getRate();
 237              		.loc 1 165 4 is_stmt 1 view .LVU38
 238              		.loc 1 165 31 is_stmt 0 view .LVU39
 239 0048 2800     		movs	r0, r5
 240 004a FFF7FEFF 		bl	_ZN4Beat7getRateEv
 241              	.LVL9:
 242              	.L9:
 243              	.LBE5:
 244              	.LBE4:
 245              	.LBE3:
 162:Core/Src/stm32g0xx_it.cpp **** 		beat.update(dmabuf[i]);
 246              		.loc 1 162 2 is_stmt 1 discriminator 2 view .LVU40
 247 004e 0134     		adds	r4, r4, #1
 248              	.LVL10:
 162:Core/Src/stm32g0xx_it.cpp **** 		beat.update(dmabuf[i]);
 249              		.loc 1 162 20 discriminator 1 view .LVU41
 250 0050 BC42     		cmp	r4, r7
 251 0052 EED1     		bne	.L10
 252              	.LBE7:
 166:Core/Src/stm32g0xx_it.cpp **** 			// send this to SPI DMA
 167:Core/Src/stm32g0xx_it.cpp **** 		}
 168:Core/Src/stm32g0xx_it.cpp **** 	}
 169:Core/Src/stm32g0xx_it.cpp ****   /* USER CODE END DMA1_Channel1_IRQn 1 */
 170:Core/Src/stm32g0xx_it.cpp **** }
 253              		.loc 1 170 1 is_stmt 0 view .LVU42
 254              		@ sp needed
 255              	.LVL11:
 256              		.loc 1 170 1 view .LVU43
 257 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 258              	.L16:
 259 0056 C046     		.align	2
 260              	.L15:
 261 0058 00000000 		.word	hadc1
 262 005c 00000000 		.word	htim3
 263 0060 00000000 		.word	hdma_adc1
 264 0064 00000000 		.word	dmabuf
 265 0068 00000000 		.word	beat
 266              		.cfi_endproc
 267              	.LFE425:
 268              		.fnend
 270              		.text
 271              	.Letext0:
 272              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 273              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 274              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g030xx.h"
 275              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g0xx.h"
 276              		.file 6 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 277              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 278              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_adc.h"
 279              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_tim.h"
 280              		.file 10 "Core/Inc/adc.h"
 281              		.file 11 "Core/Inc/tim.h"
 282              		.file 12 "Core/Inc/beat.h"
 283              		.file 13 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 284              		.file 14 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
ARM GAS  /tmp/ccNNnDmz.s 			page 9


ARM GAS  /tmp/ccNNnDmz.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 stm32g0xx_it.cpp
     /tmp/ccNNnDmz.s:19     .text.NMI_Handler:00000000 $t
     /tmp/ccNNnDmz.s:25     .text.NMI_Handler:00000000 NMI_Handler
      .ARM.exidx.text.NMI_Handler:00000000 $d
     /tmp/ccNNnDmz.s:44     .text.HardFault_Handler:00000000 $t
     /tmp/ccNNnDmz.s:50     .text.HardFault_Handler:00000000 HardFault_Handler
.ARM.exidx.text.HardFault_Handler:00000000 $d
     /tmp/ccNNnDmz.s:69     .text.SVC_Handler:00000000 $t
     /tmp/ccNNnDmz.s:75     .text.SVC_Handler:00000000 SVC_Handler
      .ARM.exidx.text.SVC_Handler:00000000 $d
     /tmp/ccNNnDmz.s:92     .text.PendSV_Handler:00000000 $t
     /tmp/ccNNnDmz.s:98     .text.PendSV_Handler:00000000 PendSV_Handler
   .ARM.exidx.text.PendSV_Handler:00000000 $d
     /tmp/ccNNnDmz.s:114    .text.SysTick_Handler:00000000 $t
     /tmp/ccNNnDmz.s:120    .text.SysTick_Handler:00000000 SysTick_Handler
  .ARM.exidx.text.SysTick_Handler:00000000 $d
     /tmp/ccNNnDmz.s:146    .text.DMA1_Channel1_IRQHandler:00000000 $t
     /tmp/ccNNnDmz.s:152    .text.DMA1_Channel1_IRQHandler:00000000 DMA1_Channel1_IRQHandler
     /tmp/ccNNnDmz.s:261    .text.DMA1_Channel1_IRQHandler:00000058 $d
.ARM.exidx.text.DMA1_Channel1_IRQHandler:00000000 $d

UNDEFINED SYMBOLS
HAL_IncTick
__aeabi_unwind_cpp_pr0
HAL_ADC_Stop_DMA
HAL_TIM_Base_Stop
HAL_DMA_IRQHandler
HAL_ADC_Start_DMA
HAL_TIM_Base_Start
_ZN4Beat6updateEt
_ZNK4Beat7isValidEv
_ZN4Beat7getRateEv
hadc1
htim3
hdma_adc1
dmabuf
beat
